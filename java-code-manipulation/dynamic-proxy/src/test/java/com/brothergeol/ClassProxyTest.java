package com.brothergeol;import static net.bytebuddy.matcher.ElementMatchers.named;import java.lang.reflect.InvocationHandler;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import net.bytebuddy.ByteBuddy;import net.bytebuddy.implementation.InvocationHandlerAdapter;import net.sf.cglib.proxy.Enhancer;import net.sf.cglib.proxy.MethodInterceptor;import net.sf.cglib.proxy.MethodProxy;import org.junit.jupiter.api.Test;public class ClassProxyTest {    @Test    void cglibProxy() {        MethodInterceptor handler = new MethodInterceptor() {            private final SampleClassService sampleClassService = new SampleClassService();            @Override            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {                if (method.getName().equals("before")) {                    System.out.println("proxy start");                    Object invoke = method.invoke(sampleClassService, objects);                    System.out.println("proxy end");                    return invoke;                }                return method.invoke(sampleClassService, objects);            }        };        SampleClassService sampleClassService = (SampleClassService) Enhancer.create(SampleClassService.class, handler);        Sample sample = new Sample();        sample.setName("class proxy");        sampleClassService.before(sample);        sampleClassService.after(sample);    }    @Test    void byteBuddyProxy() throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {        Class<? extends SampleClassService> proxyClass = new ByteBuddy()            .subclass(SampleClassService.class)            .method(named("before"))            .intercept(InvocationHandlerAdapter.of(new InvocationHandler() {                private final SampleClassService sampleClassService = new SampleClassService();                @Override                public Object invoke(Object o, Method method, Object[] args) throws Throwable {                    System.out.println("proxy start");                    Object invoke = method.invoke(sampleClassService, args);                    System.out.println("proxy end");                    return invoke;                }            }))            .make()            .load(SampleClassService.class.getClassLoader())            .getLoaded();        SampleClassService sampleClassService = proxyClass.getConstructor(null).newInstance();        Sample sample = new Sample();        sample.setName("class proxy");        sampleClassService.before(sample);        sampleClassService.after(sample);    }}